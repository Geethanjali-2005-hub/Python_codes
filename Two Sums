class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        # Create a dictionary to store numbers and their indices
        num_map = {}

        # Iterate through the list of numbers with their indices
        for i, num in enumerate(nums):
            # Calculate the complement needed to reach the target
            complement = target - num

            # Check if the complement exists in the dictionary
            if complement in num_map:
                # If found, return the index of the complement and the current index
                return [num_map[complement], i]
            
            # If not found, add the current number and its index to the dictionary
            num_map[num] = i

        # If no solution is found (though the problem usually guarantees one)
        return []
        
